
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java.util.*;
import parser.LekserLex;
import java_cup.runtime.*;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
import python_program.*;
import python_program.expression.*;
import python_program.operators.*;
import python_program.statement.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Collections;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\012\003\000" +
    "\002\012\002\000\002\006\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\004\000" +
    "\002\011\005\000\002\013\003\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\006\000\002" +
    "\014\005\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\017\005\000\002\017\003\000\002\007\011\000\002" +
    "\007\006\000\002\007\006\000\002\007\010\000\002\007" +
    "\012\000\002\020\005\000\002\020\002\000\002\021\003" +
    "\000\002\021\010\000\002\022\004\000\002\022\002\000" +
    "\002\023\004\000\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\064\002\ufffe\004\045\005\025\017\033\033" +
    "\015\035\043\036\041\061\040\067\032\100\050\101\022" +
    "\105\010\107\013\117\006\120\012\132\016\135\026\137" +
    "\030\141\017\176\020\177\021\201\046\211\023\227\042" +
    "\240\037\001\002\000\004\002\222\001\002\000\012\030" +
    "\uffc3\137\uffc3\177\124\220\uffc3\001\002\000\034\004\045" +
    "\005\025\061\040\100\050\105\010\107\013\117\006\120" +
    "\012\132\016\135\026\141\017\177\021\227\042\001\002" +
    "\000\004\002\001\001\002\000\004\117\220\001\002\000" +
    "\064\002\ufffe\004\045\005\025\017\033\033\015\035\043" +
    "\036\041\061\040\067\032\100\050\101\022\105\010\107" +
    "\013\117\006\120\012\132\016\135\026\137\030\141\017" +
    "\176\020\177\021\201\046\211\023\227\042\240\037\001" +
    "\002\000\030\004\045\005\025\061\040\100\074\105\010" +
    "\107\013\117\075\120\012\132\016\141\017\177\021\001" +
    "\002\000\054\011\uffea\027\uffea\030\uffea\042\uffea\050\uffea" +
    "\071\uffea\072\uffea\117\uffea\122\uffea\123\uffea\132\uffea\133" +
    "\uffea\134\uffea\137\uffea\142\uffea\174\uffea\177\uffea\200\uffea" +
    "\214\uffea\215\uffea\220\uffea\001\002\000\066\002\ufffa\004" +
    "\ufffa\005\ufffa\017\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\061\ufffa\067\ufffa\100\ufffa\101\ufffa\105\ufffa\107\ufffa\117" +
    "\ufffa\120\ufffa\132\ufffa\135\ufffa\137\ufffa\141\ufffa\176\ufffa" +
    "\177\ufffa\201\ufffa\211\ufffa\227\ufffa\240\ufffa\001\002\000" +
    "\006\137\uffed\220\uffed\001\002\000\030\004\045\005\025" +
    "\061\040\100\074\105\010\107\013\117\075\120\012\132" +
    "\016\141\017\177\021\001\002\000\030\004\045\005\025" +
    "\061\040\100\074\105\010\107\013\117\075\120\012\132" +
    "\016\141\017\177\021\001\002\000\006\137\uffef\220\uffef" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\014\030\uffca\137\uffca\177\uffca\214\uffca\220" +
    "\uffca\001\002\000\054\011\uffd4\027\uffd4\030\uffd4\042\uffd4" +
    "\050\uffd4\071\uffd4\072\uffd4\117\uffd4\122\uffd4\123\uffd4\132" +
    "\uffd4\133\uffd4\134\uffd4\137\uffd4\142\uffd4\174\uffd4\177\uffd4" +
    "\200\uffd4\214\uffd4\215\uffd4\220\uffd4\001\002\000\014\030" +
    "\uffcb\137\uffcb\177\uffcb\214\uffcb\220\uffcb\001\002\000\052" +
    "\011\056\030\uffcd\042\066\050\064\071\063\072\067\117" +
    "\071\122\070\123\072\132\055\133\062\134\061\137\uffcd" +
    "\142\060\174\073\177\065\200\057\214\uffcd\215\uffcd\220" +
    "\uffcd\001\002\000\066\002\ufffc\004\ufffc\005\ufffc\017\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\061\ufffc\067\ufffc\100" +
    "\ufffc\101\ufffc\105\ufffc\107\ufffc\117\ufffc\120\ufffc\132\ufffc" +
    "\135\ufffc\137\ufffc\141\ufffc\176\ufffc\177\ufffc\201\ufffc\211" +
    "\ufffc\227\ufffc\240\ufffc\001\002\000\006\137\ufff8\220\177" +
    "\001\002\000\004\100\175\001\002\000\006\137\uffee\220" +
    "\uffee\001\002\000\066\002\ufffb\004\ufffb\005\ufffb\017\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\061\ufffb\067\ufffb\100" +
    "\ufffb\101\ufffb\105\ufffb\107\ufffb\117\ufffb\120\ufffb\132\ufffb" +
    "\135\ufffb\137\ufffb\141\ufffb\176\ufffb\177\ufffb\201\ufffb\211" +
    "\ufffb\227\ufffb\240\ufffb\001\002\000\010\030\105\137\ufff4" +
    "\220\ufff4\001\002\000\010\030\137\137\ufff3\220\ufff3\001" +
    "\002\000\030\004\045\005\025\061\040\100\074\105\010" +
    "\107\013\117\075\120\012\132\016\141\017\177\021\001" +
    "\002\000\054\011\uffd5\027\uffd5\030\uffd5\042\uffd5\050\uffd5" +
    "\071\uffd5\072\uffd5\117\uffd5\122\uffd5\123\uffd5\132\uffd5\133" +
    "\uffd5\134\uffd5\137\uffd5\142\uffd5\174\uffd5\177\uffd5\200\uffd5" +
    "\214\uffd5\215\uffd5\220\uffd5\001\002\000\030\004\045\005" +
    "\025\061\040\100\074\105\010\107\013\117\075\120\012" +
    "\132\016\141\017\177\021\001\002\000\014\030\uffcc\137" +
    "\uffcc\177\uffcc\214\uffcc\220\uffcc\001\002\000\004\100\141" +
    "\001\002\000\006\137\ufff5\220\ufff5\001\002\000\054\011" +
    "\uffd3\027\uffd3\030\uffd3\042\uffd3\050\uffd3\071\uffd3\072\uffd3" +
    "\117\uffd3\122\uffd3\123\uffd3\132\uffd3\133\uffd3\134\uffd3\137" +
    "\uffd3\142\uffd3\174\uffd3\177\uffd3\200\uffd3\214\uffd3\215\uffd3" +
    "\220\uffd3\001\002\000\034\004\045\005\025\061\040\100" +
    "\050\105\010\107\013\117\006\120\012\132\016\135\026" +
    "\141\017\177\021\227\042\001\002\000\066\002\ufffd\004" +
    "\ufffd\005\ufffd\017\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\061\ufffd\067\ufffd\100\ufffd\101\ufffd\105\ufffd\107\ufffd\117" +
    "\ufffd\120\ufffd\132\ufffd\135\ufffd\137\ufffd\141\ufffd\176\ufffd" +
    "\177\ufffd\201\ufffd\211\ufffd\227\ufffd\240\ufffd\001\002\000" +
    "\052\011\uffd2\015\052\030\uffd2\042\uffd2\050\uffd2\071\uffd2" +
    "\072\uffd2\117\uffd2\122\uffd2\123\uffd2\132\uffd2\133\uffd2\134" +
    "\uffd2\137\uffd2\142\uffd2\174\uffd2\177\051\200\uffd2\214\uffd2" +
    "\220\uffd2\001\002\000\012\100\131\117\125\135\026\227" +
    "\042\001\002\000\034\004\045\005\025\061\040\100\050" +
    "\105\010\107\013\117\006\120\012\132\016\135\026\141" +
    "\017\177\021\227\042\001\002\000\014\030\uffc6\137\uffc6" +
    "\177\124\214\uffc6\220\uffc6\001\002\000\054\011\056\027" +
    "\uffd8\030\uffd8\042\066\050\064\071\063\072\067\117\071" +
    "\122\070\123\072\132\055\133\062\134\061\137\uffd8\142" +
    "\060\174\073\177\065\200\057\214\uffd8\215\uffd8\220\uffd8" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\030\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\001\002\000\032\004\045\005\025\061\040\100\074\105" +
    "\010\107\013\117\075\120\012\132\016\141\017\177\021" +
    "\214\104\001\002\000\030\004\045\005\025\061\040\100" +
    "\074\105\010\107\013\117\075\120\012\132\016\141\017" +
    "\177\021\001\002\000\030\004\045\005\025\061\040\100" +
    "\074\105\010\107\013\117\075\120\012\132\016\141\017" +
    "\177\021\001\002\000\056\011\uffd2\015\101\027\uffd2\030" +
    "\uffd2\042\uffd2\050\uffd2\071\uffd2\072\uffd2\117\uffd2\122\uffd2" +
    "\123\uffd2\132\uffd2\133\uffd2\134\uffd2\137\uffd2\142\uffd2\174" +
    "\uffd2\177\uffd2\200\uffd2\214\uffd2\215\uffd2\220\uffd2\001\002" +
    "\000\030\004\045\005\025\061\040\100\074\105\010\107" +
    "\013\117\075\120\012\132\016\141\017\177\021\001\002" +
    "\000\054\011\056\027\uffda\030\uffda\042\066\050\064\071" +
    "\063\072\067\117\071\122\070\123\072\132\055\133\062" +
    "\134\061\137\uffda\142\060\174\uffda\177\065\200\057\214" +
    "\uffda\215\uffda\220\uffda\001\002\000\042\011\056\042\066" +
    "\050\064\071\063\072\067\117\071\122\070\123\072\132" +
    "\055\133\062\134\061\142\060\174\073\177\065\200\057" +
    "\214\100\001\002\000\054\011\uffd7\027\uffd7\030\uffd7\042" +
    "\uffd7\050\uffd7\071\uffd7\072\uffd7\117\uffd7\122\uffd7\123\uffd7" +
    "\132\uffd7\133\uffd7\134\uffd7\137\uffd7\142\uffd7\174\uffd7\177" +
    "\uffd7\200\uffd7\214\uffd7\215\uffd7\220\uffd7\001\002\000\030" +
    "\004\045\005\025\061\040\100\074\105\010\107\013\117" +
    "\075\120\012\132\016\141\017\177\021\001\002\000\054" +
    "\011\uffdc\027\uffdc\030\uffdc\042\066\050\uffdc\071\uffdc\072" +
    "\uffdc\117\071\122\uffdc\123\uffdc\132\055\133\062\134\061" +
    "\137\uffdc\142\uffdc\174\uffdc\177\065\200\057\214\uffdc\215" +
    "\uffdc\220\uffdc\001\002\000\006\030\105\214\106\001\002" +
    "\000\054\011\uffd0\027\uffd0\030\uffd0\042\uffd0\050\uffd0\071" +
    "\uffd0\072\uffd0\117\uffd0\122\uffd0\123\uffd0\132\uffd0\133\uffd0" +
    "\134\uffd0\137\uffd0\142\uffd0\174\uffd0\177\uffd0\200\uffd0\214" +
    "\uffd0\215\uffd0\220\uffd0\001\002\000\030\004\045\005\025" +
    "\061\040\100\074\105\010\107\013\117\075\120\012\132" +
    "\016\141\017\177\021\001\002\000\054\011\uffcf\027\uffcf" +
    "\030\uffcf\042\uffcf\050\uffcf\071\uffcf\072\uffcf\117\uffcf\122" +
    "\uffcf\123\uffcf\132\uffcf\133\uffcf\134\uffcf\137\uffcf\142\uffcf" +
    "\174\uffcf\177\uffcf\200\uffcf\214\uffcf\215\uffcf\220\uffcf\001" +
    "\002\000\052\011\056\030\uffce\042\066\050\064\071\063" +
    "\072\067\117\071\122\070\123\072\132\055\133\062\134" +
    "\061\137\uffce\142\060\174\073\177\065\200\057\214\uffce" +
    "\215\uffce\220\uffce\001\002\000\054\011\uffe0\027\uffe0\030" +
    "\uffe0\042\066\050\uffe0\071\uffe0\072\uffe0\117\071\122\uffe0" +
    "\123\uffe0\132\055\133\062\134\061\137\uffe0\142\uffe0\174" +
    "\uffe0\177\065\200\057\214\uffe0\215\uffe0\220\uffe0\001\002" +
    "\000\054\011\uffdd\027\uffdd\030\uffdd\042\066\050\uffdd\071" +
    "\uffdd\072\uffdd\117\071\122\uffdd\123\uffdd\132\055\133\062" +
    "\134\061\137\uffdd\142\uffdd\174\uffdd\177\065\200\057\214" +
    "\uffdd\215\uffdd\220\uffdd\001\002\000\054\011\uffe3\027\uffe3" +
    "\030\uffe3\042\uffe3\050\uffe3\071\uffe3\072\uffe3\117\071\122" +
    "\uffe3\123\uffe3\132\uffe3\133\uffe3\134\uffe3\137\uffe3\142\uffe3" +
    "\174\uffe3\177\uffe3\200\057\214\uffe3\215\uffe3\220\uffe3\001" +
    "\002\000\054\011\uffe6\027\uffe6\030\uffe6\042\066\050\uffe6" +
    "\071\uffe6\072\uffe6\117\071\122\uffe6\123\uffe6\132\uffe6\133" +
    "\062\134\061\137\uffe6\142\uffe6\174\uffe6\177\uffe6\200\057" +
    "\214\uffe6\215\uffe6\220\uffe6\001\002\000\054\011\uffde\027" +
    "\uffde\030\uffde\042\066\050\uffde\071\uffde\072\uffde\117\071" +
    "\122\uffde\123\uffde\132\055\133\062\134\061\137\uffde\142" +
    "\uffde\174\uffde\177\065\200\057\214\uffde\215\uffde\220\uffde" +
    "\001\002\000\054\011\uffdf\027\uffdf\030\uffdf\042\066\050" +
    "\uffdf\071\uffdf\072\uffdf\117\071\122\uffdf\123\uffdf\132\055" +
    "\133\062\134\061\137\uffdf\142\uffdf\174\uffdf\177\065\200" +
    "\057\214\uffdf\215\uffdf\220\uffdf\001\002\000\054\011\uffe2" +
    "\027\uffe2\030\uffe2\042\uffe2\050\uffe2\071\uffe2\072\uffe2\117" +
    "\071\122\uffe2\123\uffe2\132\uffe2\133\uffe2\134\uffe2\137\uffe2" +
    "\142\uffe2\174\uffe2\177\uffe2\200\057\214\uffe2\215\uffe2\220" +
    "\uffe2\001\002\000\054\011\uffe4\027\uffe4\030\uffe4\042\uffe4" +
    "\050\uffe4\071\uffe4\072\uffe4\117\071\122\uffe4\123\uffe4\132" +
    "\uffe4\133\uffe4\134\uffe4\137\uffe4\142\uffe4\174\uffe4\177\uffe4" +
    "\200\057\214\uffe4\215\uffe4\220\uffe4\001\002\000\054\011" +
    "\uffdb\027\uffdb\030\uffdb\042\066\050\uffdb\071\uffdb\072\uffdb" +
    "\117\071\122\uffdb\123\uffdb\132\055\133\062\134\061\137" +
    "\uffdb\142\uffdb\174\uffdb\177\065\200\057\214\uffdb\215\uffdb" +
    "\220\uffdb\001\002\000\054\011\uffe1\027\uffe1\030\uffe1\042" +
    "\uffe1\050\uffe1\071\uffe1\072\uffe1\117\071\122\uffe1\123\uffe1" +
    "\132\uffe1\133\uffe1\134\uffe1\137\uffe1\142\uffe1\174\uffe1\177" +
    "\uffe1\200\uffe1\214\uffe1\215\uffe1\220\uffe1\001\002\000\054" +
    "\011\uffd9\027\uffd9\030\uffd9\042\066\050\064\071\063\072" +
    "\067\117\071\122\070\123\072\132\055\133\062\134\061" +
    "\137\uffd9\142\060\174\uffd9\177\065\200\057\214\uffd9\215" +
    "\uffd9\220\uffd9\001\002\000\054\011\uffe5\027\uffe5\030\uffe5" +
    "\042\066\050\uffe5\071\uffe5\072\uffe5\117\071\122\uffe5\123" +
    "\uffe5\132\uffe5\133\062\134\061\137\uffe5\142\uffe5\174\uffe5" +
    "\177\uffe5\200\057\214\uffe5\215\uffe5\220\uffe5\001\002\000" +
    "\012\100\126\117\125\135\026\227\042\001\002\000\012" +
    "\100\131\117\125\135\026\227\042\001\002\000\016\015" +
    "\130\030\uffc8\137\uffc8\177\051\214\uffc8\220\uffc8\001\002" +
    "\000\014\030\uffc9\137\uffc9\177\uffc9\214\uffc9\220\uffc9\001" +
    "\002\000\012\100\131\117\125\135\026\227\042\001\002" +
    "\000\006\015\130\177\051\001\002\000\006\177\124\214" +
    "\133\001\002\000\014\030\uffc5\137\uffc5\177\uffc5\214\uffc5" +
    "\220\uffc5\001\002\000\014\030\uffc7\137\uffc7\177\uffc7\214" +
    "\uffc7\220\uffc7\001\002\000\010\030\105\137\ufff2\220\ufff2" +
    "\001\002\000\010\030\137\137\ufff1\220\ufff1\001\002\000" +
    "\012\100\131\117\125\135\026\227\042\001\002\000\012" +
    "\030\uffc4\137\uffc4\177\124\220\uffc4\001\002\000\004\117" +
    "\142\001\002\000\006\100\144\214\143\001\002\000\004" +
    "\027\167\001\002\000\006\030\146\214\uffbc\001\002\000" +
    "\004\214\151\001\002\000\004\100\147\001\002\000\012" +
    "\030\146\137\uffbc\214\uffbc\220\uffbc\001\002\000\010\137" +
    "\uffbd\214\uffbd\220\uffbd\001\002\000\004\027\152\001\002" +
    "\000\054\004\045\005\025\017\033\033\015\036\041\061" +
    "\040\067\032\100\050\105\010\107\013\117\006\120\012" +
    "\132\016\135\026\137\154\141\017\176\020\177\021\201" +
    "\046\211\023\227\042\001\002\000\070\002\uffbb\004\uffbb" +
    "\005\uffbb\017\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\046" +
    "\uffbb\061\uffbb\067\uffbb\100\uffbb\101\uffbb\105\uffbb\107\uffbb" +
    "\117\uffbb\120\uffbb\132\uffbb\135\uffbb\137\uffbb\141\uffbb\176" +
    "\uffbb\177\uffbb\201\uffbb\211\uffbb\227\uffbb\240\uffbb\001\002" +
    "\000\004\104\156\001\002\000\066\002\uffbe\004\uffbe\005" +
    "\uffbe\017\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\061\uffbe" +
    "\067\uffbe\100\uffbe\101\uffbe\105\uffbe\107\uffbe\117\uffbe\120" +
    "\uffbe\132\uffbe\135\uffbe\137\uffbe\141\uffbe\176\uffbe\177\uffbe" +
    "\201\uffbe\211\uffbe\227\uffbe\240\uffbe\001\002\000\062\004" +
    "\uffb6\005\uffb6\017\uffb6\033\uffb6\035\uffb6\036\uffb6\061\uffb6" +
    "\067\uffb6\100\uffb6\101\uffb6\105\uffb6\107\uffb6\117\uffb6\120" +
    "\uffb6\132\uffb6\135\uffb6\137\160\141\uffb6\176\uffb6\177\uffb6" +
    "\201\uffb6\211\uffb6\227\uffb6\240\uffb6\001\002\000\060\004" +
    "\045\005\025\017\033\033\015\035\043\036\041\061\040" +
    "\067\032\100\050\101\022\105\010\107\013\117\006\120" +
    "\012\132\016\135\026\141\017\176\020\177\021\201\046" +
    "\211\023\227\042\240\037\001\002\000\062\004\uffb6\005" +
    "\uffb6\017\uffb6\033\uffb6\035\uffb6\036\uffb6\061\uffb6\067\uffb6" +
    "\100\uffb6\101\uffb6\105\uffb6\107\uffb6\117\uffb6\120\uffb6\132" +
    "\uffb6\135\uffb6\137\160\141\uffb6\176\uffb6\177\uffb6\201\uffb6" +
    "\211\uffb6\227\uffb6\240\uffb6\001\002\000\060\004\uffb7\005" +
    "\uffb7\017\uffb7\033\uffb7\035\uffb7\036\uffb7\061\uffb7\067\uffb7" +
    "\100\uffb7\101\uffb7\105\uffb7\107\uffb7\117\uffb7\120\uffb7\132" +
    "\uffb7\135\uffb7\141\uffb7\176\uffb7\177\uffb7\201\uffb7\211\uffb7" +
    "\227\uffb7\240\uffb7\001\002\000\064\004\045\005\025\017" +
    "\033\033\015\034\uffb8\035\043\036\041\061\040\067\032" +
    "\100\050\101\022\105\010\107\013\117\006\120\012\132" +
    "\016\135\026\137\030\141\017\176\020\177\021\201\046" +
    "\211\023\227\042\240\037\001\002\000\064\004\045\005" +
    "\025\017\033\033\015\034\uffb8\035\043\036\041\061\040" +
    "\067\032\100\050\101\022\105\010\107\013\117\006\120" +
    "\012\132\016\135\026\137\030\141\017\176\020\177\021" +
    "\201\046\211\023\227\042\240\037\001\002\000\004\034" +
    "\165\001\002\000\070\002\uffba\004\uffba\005\uffba\017\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\046\uffba\061\uffba\067" +
    "\uffba\100\uffba\101\uffba\105\uffba\107\uffba\117\uffba\120\uffba" +
    "\132\uffba\135\uffba\137\uffba\141\uffba\176\uffba\177\uffba\201" +
    "\uffba\211\uffba\227\uffba\240\uffba\001\002\000\004\034\uffb9" +
    "\001\002\000\054\004\045\005\025\017\033\033\015\036" +
    "\041\061\040\067\032\100\050\105\010\107\013\117\006" +
    "\120\012\132\016\135\026\137\154\141\017\176\020\177" +
    "\021\201\046\211\023\227\042\001\002\000\066\002\uffbf" +
    "\004\uffbf\005\uffbf\017\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\061\uffbf\067\uffbf\100\uffbf\101\uffbf\105\uffbf\107\uffbf" +
    "\117\uffbf\120\uffbf\132\uffbf\135\uffbf\137\uffbf\141\uffbf\176" +
    "\uffbf\177\uffbf\201\uffbf\211\uffbf\227\uffbf\240\uffbf\001\002" +
    "\000\010\030\105\137\ufff0\220\ufff0\001\002\000\042\011" +
    "\056\027\173\042\066\050\064\071\063\072\067\117\071" +
    "\122\070\123\072\132\055\133\062\134\061\142\060\174" +
    "\073\177\065\200\057\001\002\000\054\004\045\005\025" +
    "\017\033\033\015\036\041\061\040\067\032\100\050\105" +
    "\010\107\013\117\006\120\012\132\016\135\026\137\154" +
    "\141\017\176\020\177\021\201\046\211\023\227\042\001" +
    "\002\000\066\002\uffc0\004\uffc0\005\uffc0\017\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\061\uffc0\067\uffc0\100\uffc0\101" +
    "\uffc0\105\uffc0\107\uffc0\117\uffc0\120\uffc0\132\uffc0\135\uffc0" +
    "\137\uffc0\141\uffc0\176\uffc0\177\uffc0\201\uffc0\211\uffc0\227" +
    "\uffc0\240\uffc0\001\002\000\010\030\146\137\uffbc\220\uffbc" +
    "\001\002\000\006\137\uffeb\220\uffeb\001\002\000\054\004" +
    "\045\005\025\017\033\033\015\036\041\061\040\067\032" +
    "\100\050\105\010\107\013\117\006\120\012\132\016\135" +
    "\026\137\ufff9\141\017\176\020\177\021\201\046\211\023" +
    "\227\042\001\002\000\004\137\201\001\002\000\070\002" +
    "\ufff7\004\ufff7\005\ufff7\017\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\046\ufff7\061\ufff7\067\ufff7\100\ufff7\101\ufff7\105" +
    "\ufff7\107\ufff7\117\ufff7\120\ufff7\132\ufff7\135\ufff7\137\ufff7" +
    "\141\ufff7\176\ufff7\177\ufff7\201\ufff7\211\ufff7\227\ufff7\240" +
    "\ufff7\001\002\000\006\137\ufff6\220\ufff6\001\002\000\044" +
    "\011\056\042\066\050\064\071\063\072\067\117\071\122" +
    "\070\123\072\132\055\133\062\134\061\137\uffec\142\060" +
    "\174\073\177\065\200\057\220\uffec\001\002\000\042\011" +
    "\056\027\205\042\066\050\064\071\063\072\067\117\071" +
    "\122\070\123\072\132\055\133\062\134\061\142\060\174" +
    "\073\177\065\200\057\001\002\000\054\004\045\005\025" +
    "\017\033\033\015\036\041\061\040\067\032\100\050\105" +
    "\010\107\013\117\006\120\012\132\016\135\026\137\154" +
    "\141\017\176\020\177\021\201\046\211\023\227\042\001" +
    "\002\000\070\002\uffc1\004\uffc1\005\uffc1\017\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\046\207\061\uffc1\067\uffc1\100" +
    "\uffc1\101\uffc1\105\uffc1\107\uffc1\117\uffc1\120\uffc1\132\uffc1" +
    "\135\uffc1\137\uffc1\141\uffc1\176\uffc1\177\uffc1\201\uffc1\211" +
    "\uffc1\227\uffc1\240\uffc1\001\002\000\004\027\210\001\002" +
    "\000\054\004\045\005\025\017\033\033\015\036\041\061" +
    "\040\067\032\100\050\105\010\107\013\117\006\120\012" +
    "\132\016\135\026\137\154\141\017\176\020\177\021\201" +
    "\046\211\023\227\042\001\002\000\066\002\uffc2\004\uffc2" +
    "\005\uffc2\017\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\061" +
    "\uffc2\067\uffc2\100\uffc2\101\uffc2\105\uffc2\107\uffc2\117\uffc2" +
    "\120\uffc2\132\uffc2\135\uffc2\137\uffc2\141\uffc2\176\uffc2\177" +
    "\uffc2\201\uffc2\211\uffc2\227\uffc2\240\uffc2\001\002\000\054" +
    "\011\uffe8\027\uffe8\030\uffe8\042\uffe8\050\uffe8\071\uffe8\072" +
    "\uffe8\117\071\122\uffe8\123\uffe8\132\uffe8\133\uffe8\134\uffe8" +
    "\137\uffe8\142\uffe8\174\uffe8\177\uffe8\200\057\214\uffe8\215" +
    "\uffe8\220\uffe8\001\002\000\054\011\uffe7\027\uffe7\030\uffe7" +
    "\042\066\050\064\071\063\072\067\117\071\122\070\123" +
    "\072\132\055\133\062\134\061\137\uffe7\142\060\174\uffe7" +
    "\177\065\200\057\214\uffe7\215\uffe7\220\uffe7\001\002\000" +
    "\054\011\uffe9\027\uffe9\030\uffe9\042\066\050\uffe9\071\uffe9" +
    "\072\uffe9\117\071\122\uffe9\123\uffe9\132\uffe9\133\062\134" +
    "\061\137\uffe9\142\uffe9\174\uffe9\177\uffe9\200\057\214\uffe9" +
    "\215\uffe9\220\uffe9\001\002\000\006\030\105\215\216\001" +
    "\002\000\054\011\uffd1\027\uffd1\030\uffd1\042\uffd1\050\uffd1" +
    "\071\uffd1\072\uffd1\117\uffd1\122\uffd1\123\uffd1\132\uffd1\133" +
    "\uffd1\134\uffd1\137\uffd1\142\uffd1\174\uffd1\177\uffd1\200\uffd1" +
    "\214\uffd1\215\uffd1\220\uffd1\001\002\000\004\002\uffff\001" +
    "\002\000\004\214\221\001\002\000\054\011\uffd6\027\uffd6" +
    "\030\uffd6\042\uffd6\050\uffd6\071\uffd6\072\uffd6\117\uffd6\122" +
    "\uffd6\123\uffd6\132\uffd6\133\uffd6\134\uffd6\137\uffd6\142\uffd6" +
    "\174\uffd6\177\uffd6\200\uffd6\214\uffd6\215\uffd6\220\uffd6\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\034\002\003\003\006\004\010\005\046\006" +
    "\033\007\013\010\030\011\043\013\026\014\034\015\023" +
    "\016\004\017\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\076\015\023\016\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\216\004\010\005" +
    "\046\006\033\007\013\010\030\011\043\013\026\014\034" +
    "\015\023\016\004\017\035\001\001\000\006\013\026\014" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\213\001\001\000\004\013\212\001" +
    "\001\000\002\001\001\000\004\013\211\001\001\000\004" +
    "\013\203\001\001\000\004\013\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\171\001\001\000\002\001" +
    "\001\000\006\013\026\014\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\026\014\134\015\023\016\004\017\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\023\016" +
    "\133\001\001\000\010\013\053\015\023\016\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\122\001" +
    "\001\000\004\013\121\001\001\000\004\013\120\001\001" +
    "\000\004\013\117\001\001\000\004\013\116\001\001\000" +
    "\004\013\115\001\001\000\004\013\114\001\001\000\004" +
    "\013\113\001\001\000\004\013\112\001\001\000\004\013" +
    "\111\001\001\000\004\013\110\001\001\000\004\013\107" +
    "\001\001\000\006\013\026\014\102\001\001\000\004\013" +
    "\101\001\001\000\004\013\075\001\001\000\002\001\001" +
    "\000\004\013\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\023\016\126" +
    "\001\001\000\006\015\023\016\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\023\016\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\023\016\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\006\152\010\030\011\043\013\026\014\034\015\023\016" +
    "\004\017\035\021\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\156\001\001\000" +
    "\026\005\161\006\033\007\013\010\030\011\043\013\026" +
    "\014\034\015\023\016\004\017\035\001\001\000\004\023" +
    "\160\001\001\000\002\001\001\000\032\004\162\005\046" +
    "\006\033\007\013\010\030\011\043\013\026\014\034\015" +
    "\023\016\004\017\035\022\163\001\001\000\032\004\162" +
    "\005\046\006\033\007\013\010\030\011\043\013\026\014" +
    "\034\015\023\016\004\017\035\022\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\152\010\030\011\043\013\026\014\034\015\023\016\004" +
    "\017\035\021\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\152\010\030\011\043" +
    "\013\026\014\034\015\023\016\004\017\035\021\173\001" +
    "\001\000\002\001\001\000\004\020\175\001\001\000\002" +
    "\001\001\000\016\011\201\013\026\014\034\015\023\016" +
    "\004\017\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\152\010\030\011\043\013\026\014\034\015\023" +
    "\016\004\017\035\021\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\152\010\030\011\043\013\026" +
    "\014\034\015\023\016\004\017\035\021\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  Vector<String> output;

  public static void main(String[] args) throws Exception {
  
      Writer output = new BufferedWriter(new FileWriter(args[0],true));  //clears file every time
      output.append(System.lineSeparator());
      output.close();
  
      String PathOut = Paths.get(args[0]).getFileName().toString();
      PathOut = PathOut.substring(0, PathOut.lastIndexOf('.')) + ".html";

  
      // create a buffering scanner wrapper
      ScannerBuffer lexer = new ScannerBuffer(new LekserLex(new BufferedReader(new FileReader(args[0]))));
      
      // start parsing
      parser p = new parser(lexer);
      p.output = new Vector<String>();
      XMLElement e = (XMLElement)p.debug_parse().value;
      
      Collections.reverse(p.output);
      File file = new File(PathOut);
      boolean b = file.createNewFile();
      FileWriter writer = new FileWriter(file); 
      writer.write("<html>\n<head>\n<style>\ntable,td {\n\tborder: 1px solid black;\n\tborder-collapse: collapse;\n}\ntd {\n\ttext-align: left;\n}\n</style>\n</head>\n<body>\n<table>");
      for (String s : p.output) {
        writer.write("\t<tr>\n" + s + "\t</tr>\n");
      }
      writer.write("</table>\n</body>\n</html>\n");
      writer.flush();
      writer.close();
    
      String content = new java.util.Scanner(new File(args[0])).useDelimiter("\\Z").next();
      output = new BufferedWriter(new FileWriter(args[0]));
      output.append(content.substring(0, content.length()));
      output.close();
    
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_newline_list 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program((List<Statement>)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_newline_list ::= stmt_newline stmt_newline_list 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((List<Statement>)val1).addAll((List<Statement>)val2);
                                    RESULT = val1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_newline_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_newline_list ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_newline_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_newline ::= stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_newline",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_newline ::= NEWLINE 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_newline",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= simple_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= compund_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // semi_question ::= SEMICOLON 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_question",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // semi_question ::= 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_question",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_stmt ::= small_stmt_list semi_question NEWLINE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // small_stmt_list ::= small_stmt_list SEMICOLON small_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((List<Statement>)val1).addAll((List<Statement>)val2);
                                    RESULT = val1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // small_stmt_list ::= small_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // small_stmt ::= expr_stmt_comma_list 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // small_stmt ::= string_exp_comma_list 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // small_stmt ::= PRINT expr_stmt_comma_list 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintStatement((List<Expression>)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // small_stmt ::= PRINT string_exp_comma_list 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintStatement((List<Expression>)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // small_stmt ::= DEL expr_stmt_comma_list 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // small_stmt ::= PASS 
            {
              Object RESULT =null;
		 RESULT = new PassStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // small_stmt ::= BREAK 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // small_stmt ::= CONTINUE 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // small_stmt ::= RETURN expr_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStatement((Expression)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // small_stmt ::= GLOBAL IDENTIFIER identifier_comma_list 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr_stmt ::= INTEGER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerExpression((String)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr_stmt ::= MINUS expr_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.sub, (Expression) val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr_stmt ::= PLUS expr_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.add, (Expression) val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr_stmt ::= NOT expr_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.not, (Expression) val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_stmt ::= expr_stmt PLUS expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.add, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_stmt ::= expr_stmt MINUS expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.sub, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_stmt ::= expr_stmt MULT expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.mult, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_stmt ::= expr_stmt DIV expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.div, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_stmt ::= expr_stmt MOD expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.mod, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_stmt ::= expr_stmt POW expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.pow, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_stmt ::= expr_stmt LESS expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.less, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_stmt ::= expr_stmt GREATER expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.greater, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_stmt ::= expr_stmt EQUAL expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.equal, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_stmt ::= expr_stmt GREATEROREQUAL expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.greaterorequal, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_stmt ::= expr_stmt LESSOREQUAL expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.lessorequal, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_stmt ::= expr_stmt NOTEQUAL expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.notequal, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_stmt ::= expr_stmt OR expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.or, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_stmt ::= expr_stmt AND expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression((Expression) val1, BinaryOperators.and, (Expression) val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_stmt ::= IDENTIFIER ASSIGN expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatement(new IdentifierExpression((String)val1), (Expression)val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_stmt ::= LEFTPARENTHESE expr_stmt RIGHTPARENTHESE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParenthesesExpression((Expression)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_stmt ::= INPUT LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;
		 RESULT = new InputExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_stmt ::= FLOAT 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatExpression(((String)val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_stmt ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new TrueExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_stmt ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new FalseExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_stmt ::= IDENTIFIER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExpression((String)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_stmt ::= LEFTSQUAREBRACKET expr_stmt_comma_list RIGHTSQUAREBRACKET 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ListExpression((List<Expression>)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_stmt ::= expr_stmt LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Object RESULT =null;
		 RESULT = new FunctionExpression((Expression)expr, new LinkedList<Expression>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_stmt ::= expr_stmt LEFTPARENTHESE expr_stmt_comma_list RIGHTPARENTHESE 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionExpression((Expression)val1, (LinkedList<Expression>)val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_stmt_comma_list ::= expr_stmt_comma_list COMMA expr_stmt 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((List<Expression>)val1).add((Expression)val2); 
                                        RESULT = val1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt_comma_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_stmt_comma_list ::= expr_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Expression> list = new LinkedList<Expression>();
                                        if((Expression)val != null) {
                                            list.add((Expression)val);
                                        }
                                        RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt_comma_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // strings ::= STRING 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)value ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // strings ::= MULTILINESTRING 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)value; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // string_exp ::= strings 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringExpression((String)value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // string_exp ::= string_exp PLUS string_exp 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // string_exp ::= string_exp PLUS IDENTIFIER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // string_exp ::= IDENTIFIER PLUS string_exp 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // string_exp ::= IDENTIFIER ASSIGN string_exp 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatement(new IdentifierExpression((String)val1), (StringExpression)val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // string_exp ::= LEFTPARENTHESE string_exp RIGHTPARENTHESE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // string_exp_comma_list ::= string_exp_comma_list COMMA string_exp 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((List<Expression>)val1).add((Expression)val2); 
                                        RESULT = val1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp_comma_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // string_exp_comma_list ::= string_exp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Expression> list = new LinkedList<Expression>();
                                        if((Expression)val != null) {
                                            list.add((Expression)val);
                                        }
                                        RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_exp_comma_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compund_stmt ::= IF expr_stmt COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseStatement((Expression)val1, (List<Statement>)val2, (List<Statement>)val3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // compund_stmt ::= IF expr_stmt COLON suite 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement((Expression)val1, (List<Statement>)val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // compund_stmt ::= WHILE expr_stmt COLON suite 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStatement((Expression)val1, (List<Statement>)val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // compund_stmt ::= DEF IDENTIFIER LEFTPARENTHESE RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 interpreter.FunctionsVariables.function.add((String) val1);
                                        RESULT = new FunctionDefinitionStatement((String)val1, new LinkedList<String>(), (List<Statement>)val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // compund_stmt ::= DEF IDENTIFIER LEFTPARENTHESE IDENTIFIER identifier_comma_list RIGHTPARENTHESE COLON suite 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 interpreter.FunctionsVariables.function.add((String) val1);
                                        ((List<String>)val3).add((String)val2);
                                        RESULT = new FunctionDefinitionStatement((String)val1, (List<String>)val3, (List<Statement>)val4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // identifier_comma_list ::= COMMA IDENTIFIER identifier_comma_list 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((List<String>)val2).add((String)val1);
                                        RESULT = val2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identifier_comma_list ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_comma_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // suite ::= simple_stmt 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (List<Statement>)val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // suite ::= NEWLINE INDENT newline_star stmt stmt_newline_star DEDENT 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = (List<Statement>)val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmt_newline_star ::= stmt_newline stmt_newline_star 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_newline_star",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmt_newline_star ::= 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_newline_star",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // newline_star ::= NEWLINE newline_star 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("newline_star",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // newline_star ::= 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("newline_star",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
